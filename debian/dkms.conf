#MAKE[#]=
#   The MAKE directive array tells DKMS which make command should be used for building  your	mod
#   ule.  The  default  make	command should be put into MAKE[0].  Other entries in the MAKE array
#   will only be used if their corresponding entry in MAKE_MATCH[#] matches, as a regular  expres
#   sion  (using  egrep), the kernel that the module is being built for.  Note that if no value is
#   placed in MAKE_MATCH[#] for any MAKE[#] where # > 0, then  that  MAKE  directive	is  ignored.
#   MAKE_MATCH[0]  is  optional  and	if  it is populated, it will be used to determine if MAKE[0]
#   should be used to build the module for that kernel.  If multiple MAKE_MATCH  directives  match
#   against  the kernel being built for, the last matching MAKE[#] will be used to build your mod
#   ule. If no MAKE directive is specified or if no MAKE_MATCH matches the kernel being built for,
#   DKMS will attempt to use a generic MAKE command to build your module.

MAKE[0]="make"

#MAKE_MATCH[#]=
#   See  the	above  entry  on  MAKE[#]  directives.	 This array should be populated with regular
#   expressions which, when matched against the kernel being built for, will tell DKMS to use  the
#   corresponding make command in the MAKE[#] directive array to build your module.
#
#BUILT_MODULE_NAME[#]=
#   This directive gives the name of the module just after it is built.  If your DKMS module pack
#   age contains more than one module to install, this is a required directive for all of the mod
#   ules.  This directive should explicitly not contain any trailing ".o" or ".ko".  Note that for
#   each module within a dkms package, the numeric value of  #  must	be  the  same  for  each  of
#   BUILT_MODULE_NAME,  BUILT_MODULE_LOCATION,  DEST_MODULE_NAME and DEST_MODULE_LOCATION and that
#   the   numbering	should	 start	 at   0   (eg.	 BUILT_MODULE_NAME[0]="qla2200"   BUILT_MOD
#   ULE_NAME[1]="qla2300").

BUILT_MODULE_NAME[0]="asus_eee"

#BUILT_MODULE_LOCATION[#]=
#   This directive tells DKMS where to find your built module after it has been built.  This path
#   name should be given relative to the root directory of your source files (where your dkms.conf
#   file  can  be  found).   If  unset, DKMS expects to find your BUILT_MODULE_NAME[#] in the root
#   directory of your source files.  Note that for each module within a dkms package, the  numeric
#   value  of  #  must be the same for each of BUILT_MODULE_NAME, BUILT_MODULE_LOCATION, DEST_MOD
#   ULE_NAME	and  DEST_MODULE_LOCATION  and	that  the  numbering  should   start   at   0	(eg.
#   BUILT_MODULE_LOCATION[0]="some/dir/" BUILT_MODULE_LOCATION[1]="other/dir/").
#
#DEST_MODULE_NAME[#]=
#   This  directive can be used to specify the name of the module as it should be installed.	This
#   will rename the module  from  BUILT_MODULE_NAME[#]  to  DEST_MODULE_NAME[#].   This  directive
#   should  explicitly  not contain any trailing ".o" or ".ko".  If unset, it is assumed to be the
#   same value as BUILT_MODULE_NAME[#].  Note that for each module  within  a  dkms  package,  the
#   numeric  value  of  #  must  be the same for each of BUILT_MODULE_NAME, BUILT_MODULE_LOCATION,
#   DEST_MODULE_NAME and DEST_MODULE_LOCATION and that  the  numbering  should  start  at  0	(eg.
#   DEST_MODULE_NAME[0]="qla2200_6x" DEST_MODULE_NAME[1]="qla2300_6x").
#
#DEST_MODULE_LOCATION[#]=
#   This directive specifies the destination where a module should be installed to, once compiled.
#   It also is used for finding original_modules.  This is a required directive.   This  directive
#   must  start with the text "/kernel" which is in reference to /lib/modules/<kernelversion>/ker
#   nel.  Note that for each module within a dkms package, the numeric value of # must be the same
#   for  each  of BUILT_MODULE_NAME, BUILT_MODULE_LOCATION, DEST_MODULE_NAME and DEST_MODULE_LOCA
#   TION  and  that  the  numbering  should  start  at   0   (eg.   DEST_MODULE_LOCATION[0]="/ker
#   nel/drivers/something/" DEST_MODULE_LOCATION[1]="/kernel/drivers/other/").

DEST_MODULE_LOCATION[0]="/kernel/drivers/misc/"

#MODULES_CONF_ALIAS_TYPE[#]=
#   This  directive  array  specifies how your modules should be aliased in /etc/modules.conf when
#   your module is installed.  This is done in an  intelligent  fashion  so  if  DKMS  detects  an
#   already  existing  reference in modules.conf, it wont add a new line.  If it is not detected,
#   it will add it to the modules.conf as the last alias number for that alias type (eg.  if	MOD
#   ULES_CONF_ALIAS_TYPE="scsi_hostadapter",	no  alias  currently  exists for that module and the
#   last scsi_hostadapter reference is 6, then your module will be added as  "scsi_hostadapter7").
#   Common  values  for this directive include: scsi_hostadapter , sound-slot- and eth.  Note that
#   the numeric value of # is tied  to  the  index  of  BUILD_MODULE_NAME,  BUILT_MODULE_LOCATION,
#   DEST_MODULE_NAME	and DEST_MODULE_LOCATION.  The index is also tied to MODULES_CONF_OBSOLETES.
#
#MODULES_CONF_OBSOLETES[#]=
#   This directive array tells DKMS what modules.conf alias references are obsoleted by the module
#   you are installing.  If your module obsoletes more than one module, this directive should be a
#   comma-delimited  list  of  those	modules  that  are  obsoleted  (eg.  for   megaraid2,	MOD
#   ULES_CONF_OBSOLETES[0]="megaraid,megaraid_2002").  When  you  are installing your module, DKMS
#   ensures that any entries	in  /etc/modules.conf  with  the  same	MODULES_CONF_ALIAS_TYPE  are
#   changed  over to the new module name.  When you are uninstalling your module, depending on the
#   modules in your /lib/modules tree, DKMS will take different actions.  If	you  kernel  has  an
#   original_module,	then  modules.conf  will  not be touched and the non-obsolete reference will
#   remain.  If the kernel does not have an original_module but does have one of the obsolete mod
#   ules, it will replace those references with the first obsolete module name in the comma-delim
#   ited list that is also in that kernel (thus, your obsolete list  should  be  prioritized	from
#   left  to	right).   If no original_module or obsolete modules are found within the kernel, the
#   alias entry is removed all-together. Note that the numeric value of # is tied to the index  of
#   BUILD_MODULE_NAME,  BUILT_MODULE_LOCATION,  DEST_MODULE_NAME  and  DEST_MODULE_LOCATION.	 The
#   index is also tied to MODULES_CONF_ALIAS_TYPE.
#
#MODULES_CONF_OBSOLETE_ONLY[#]=
#   If set to yes , this directive will tell DKMS to only modify  /etc/modules.conf  if  it  finds
#   within  it an obsolete reference as specified in the corresponding value of MODULES_CONF_OBSO
#   LETES[#] array directive.
#
#STRIP[#]=
#   By default strip is considered to be "yes".  If set to  "no",  DKMS  will  not  run  strip  -g
#   against your built module to remove debug symbols from it.
#
#PACKAGE_NAME=
#   This  directive  is used to give the name associated with the entire package of modules.	This
#   is the same name that is used with the -m option when building, adding, etc. and may not	nec
#   essarily be the same as the MODULE_NAME.	This directive must be present in every dkms.conf.

PACKAGE_NAME="asus_eee"

#PACKAGE_VERSION=
#   This directive is used to give the version associated with the entire package of modules being
#   installed within that dkms package.  This directive must be present in every dkms.conf.

PACKAGE_VERSION="0.3.1"

#CLEAN= CLEAN specifies the make clean command to be used to clean up both before and  after  building
#   the module.  If unset, it is assumed to be "make clean".
#
#REMAKE_INITRD=
#   This  directive  specifies  whether your initrd should be remade after the module is installed
#   onto the kernel.	Any text after the first character is ignored and if the first character  is
#   not a "y" or a "Y", it is assumed that REMAKE_INITRD="no".

REMAKE_INITRD="no"

#UDEV_TRIGGER=
#   This  optional  directive  specifies, if the udev daemon will be get a trigger event after the
#   module is installed for your currently running kernel. Because this udev	trigger  might	have
#   some  unfriendly side effects on some Linux Systems, you can now disable this trigger, if your
#   driver does not need it anyway.  UDEV_TRIGGER=yes is assumed as  the  default,  although	this
#   directive  may  not  be  given. This esures backward compatibility to older DKMS releases. Any
#   text after the first character is ignored and if the first character is not a "n" or a "N", it
#   is assumed that UDEV_TRIGGER="yes".

UDEV_TRIGGER="no"

#MODULES_CONF[#]=
#   This  directive  array  specifies  what  static configuration text lines need to be added into
#   /etc/modules.conf for your module. See the section on MODULES.CONF CHANGES for  more  informa
#   tion regarding the implications of modifying /etc/modules.conf
#
#OBSOLETE_BY=
#   This  directive  allows  you to specify a kernel version that obsoletes the necessity for this
#   particular DKMS module.  This can be specified as a particular upstream kernel or an ABI	bump
#   of  a  kernel.  For example, "2.6.24" would be an upstream kernel and "2.6.24-16" would repre
#   sent an ABI bump for a kernel.  Both are valid in this area.
#
#   Please avoid the use of OBSOLETE_BY wherever possible.  Its use indicates a  lack  of  proper
#   module  versioning  using  MODULE_VERSION() tags in the module source itself.  It is better to
#   fix the MODULE_VERSION() tags than use OBSOLETE_BY.  This also introduces a implicit distribu
#   tion/version  dependency on the package, as the value of OBSOLETE_BY is meaningful only in the
#   context of a single distribution/version.
#
#   If you feel you must use it, please use as such in dkms.conf:
#
#    ubuntu_804="Ubuntu
#    8.04"
#    if [ -x /usr/bin/lsb_release ]; then
#  if [ "$(/usr/bin/lsb_release -sir)" == "${ubuntu_804}" ]; then
#    OBSOLETE_BY="2.6.25"
#  fi
#    fi
#
#
#PATCH[#]=
#   Use the PATCH directive array to specify patches which should be applied to your source before
#   a  build	occurs.  All patches are expected to be in -p1 format and are applied with the patch
#   -p1 command.  Each directive should specify the filename	of  the  patch	to  apply,  and  all
#   patches  must be located in the patches subdirectory of your source directory ( /usr/src/<mod
#   ule>-<module-version>/patches/ ).  If any patch fails to apply, the build will be  halted  and
#   the rejections can be inspected in /var/lib/dkms/<module>/<module-version>/build/.  If a PATCH
#   should only be applied conditionally, the PATCH_MATCH[#] array should be used,  and  a  corre
#   sponding	regular  expression should be placed in PATCH_MATCH[#] which will alert dkms to only
#   use that PATCH[#] if the regular expression matches the kernel which the module  is  currently
#   being built for.
#
#PATCH_MATCH[#]=
#   See the above description for PATCH[#] directives. If you only want a patch applied in certain
#   scenarios, the PATCH_MATCH array should be utilized  by  giving  a  regular  expression  which
#   matches  the  kernels  you  intend the corresponding PATCH[#] to be applied to before building
#   that module.
#
#AUTOINSTALL=
#   If this directive is set to yes  then  the  service  /etc/rc.d/init.d/dkms_autoinstaller	will
#   automatically  try  to  install  this  module on any kernel you boot into.  See the section on
#   dkms_autoinstaller for more information.

AUTOINSTALL="yes"

#BUILD_EXCLUSIVE_KERNEL=
#   This optional directive allows you to specify a regular expression which defines the subset of
#   kernels  which  DKMS  is allowed to build your module for.  If the kernel being built for does
#   not match against this regular expression, the dkms build will error out.  For example, if you
#   set it as ="^2.4.*", your module would not be built for 2.6 kernels.
#
#BUILD_EXCLUSIVE_ARCH=
#   This  optional  directive  functions  very  similarly to BUILD_EXCLUSIVE_KERNEL except that it
#   matches against the kernel architecture.	For example, if you set it to ="i.86",	your  module
#   would not be built for ia32e, x86_64, amd64, s390, etc.
#
#POST_ADD=
#   The name of the script to be run after an add is performed.  The path should be given relative
#   to the root directory of your source.
#
#POST_BUILD=
#   The name of the script to be run after a build is performed. The path should be given relative
#   to the root directory of your source.
#
#POST_INSTALL=
#   The name of the script to be run after an install is performed. The path should be given rela
#   tive to the root directory of your source.
#
#POST_REMOVE=
#   The name of the script to be run after a remove is performed. The path should be	given  rela
#   tive to the root directory of your source.
#
#PRE_BUILD=
#   The  name  of the script to be run before a build is performed. The path should be given rela
#   tive to the root directory of your source.
#
#PRE_INSTALL=
#   The name of the script to be run before an install is performed. The path should be given rel
#   ative  to  the  root directory of your source.  If the script exits with a non-zero value, the
#   install will be aborted.	This is typically used to perform a custom version comparison.
